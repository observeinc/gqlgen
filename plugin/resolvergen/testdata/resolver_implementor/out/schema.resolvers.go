package customresolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"
)

// Resolver is the resolver for the resolver field.
func (r *queryCustomResolverType) Resolver(ctx context.Context) (*Resolver, error) {
	panic("implementor implemented me")
}

// Name is the resolver for the name field.
func (r *resolverCustomResolverType) Name(ctx context.Context, obj *Resolver) (string, error) {
	panic("implementor implemented me")
}

// InputName is the resolver for the input_name field.
func (r *testInputCustomResolverType) InputName(ctx context.Context, obj *TestInput, data string) error {
	panic("implementor implemented me")
}

// Query returns QueryResolver implementation.
func (r *CustomResolverType) Query() QueryResolver { return &queryCustomResolverType{r} }

// Resolver returns ResolverResolver implementation.
func (r *CustomResolverType) Resolver() ResolverResolver { return &resolverCustomResolverType{r} }

// TestInput returns TestInputResolver implementation.
func (r *CustomResolverType) TestInput() TestInputResolver { return &testInputCustomResolverType{r} }

type queryCustomResolverType struct{ *CustomResolverType }
type resolverCustomResolverType struct{ *CustomResolverType }
type testInputCustomResolverType struct{ *CustomResolverType }
